package com.example.android_projectview02;import android.Manifest;import android.app.Dialog;import android.content.ContentResolver;import android.content.ContentValues;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.WindowManager;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.TextView;import android.widget.Toast;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import com.bumptech.glide.Glide;import com.example.android_projectview02.widget.GlideRoundTransform;import com.example.android_projectview02.widget.TitleLayout;import com.gyf.immersionbar.ImmersionBar;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URL;import java.net.URLConnection;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;/** * @1.自定义弹框 popWindows,dialog 仿照IOS实现 * @2.二维码太大，设置间距 * @3.保存图片->现在之后保存到本地图库！ * */public class HTMIQrCodeViewActivity extends BaseActivity implements View.OnClickListener {    /*实例http://219.140.196.71:8888//data-crab/filecontroller/downloadCode/26441973338472783*/    private String QRURL = "http://219.140.196.71:8888//data-crab/filecontroller/downloadCode/26441973338472783";    public static final String PIC_DIR_NAME = "qrPhotos";    /*head控件*/    @BindView(R.id.mtitle)    TitleLayout mtitle;    /*个人头像*/    @BindView(R.id.imageview_residemenu_avatar)    ImageView imageview_residemenu_avatar;    /*个人姓名*/    @BindView(R.id.textview_currentUserName)    TextView textview_currentUserName;    @BindView(R.id.default_tv)    TextView default_tv;    /*二维码*/    @BindView(R.id.qr_pic)    ImageView qr_pic;    /*底部弹框*/    private PopupWindow pop;    /*弹框提示*/    private Dialog dialog;    /*保存二维码*/    private TextView save_picture;    /*取消弹框*/    private TextView cancel_tv;    private Button btn_cancel;    /*重置二维码*/    private TextView reset_qrCode;    private Button btn_reset;    private File mPicDir;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_qr_layout);        ButterKnife.bind(this);        initView();    }    @Override    protected void onResume() {        super.onResume();        //step:1.获取个人头像以及个人名字        textview_currentUserName.setText("Test");        //step:2.获取二维码使用Glide加载图片        showQr();    }    /**     * 获取二维码图片     */    private void showQr() {        Glide.with(this).                load(QRURL)                .placeholder(R.drawable.ic_error_page)                .error(R.drawable.ic_error_page)                .transform(new GlideRoundTransform(this))                .into(qr_pic);    }    private void initView() {        TextView tv = (TextView) mtitle.findViewById(R.id.tv_title_title);        tv.setTextColor(Color.WHITE);        mPicDir = new File(Environment.getExternalStoragePublicDirectory(                Environment.DIRECTORY_PICTURES), PIC_DIR_NAME);    }    @OnClick({R.id.iv_title_left, R.id.iv_title_right})    public void OnClickKnife(View view) {        switch (view.getId()) {            case R.id.iv_title_left:                finish();                break;            case R.id.iv_title_right:                initPop();                if (!pop.isShowing()) {                    pop.showAtLocation(view, Gravity.BOTTOM, 0, 0);                    pop.update();                }                break;            default:                new Throwable().printStackTrace();                break;        }    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.save_picture:                if (mPicDir != null) {                    //step:1.把二维码下载下来存到指定文件夹                    if ((ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)) {                        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE},                                0);                    } else {                        QRDownload(mPicDir);                    }                }                break;            case R.id.reset_qrCode:                initDialog();                PopIsShowing();                break;            case R.id.cancel_tv:                PopIsShowing();                break;            case R.id.btn_cancel:                if (dialog.isShowing()) {                    dialog.dismiss();                }                break;            case R.id.btn_reset:                if (dialog.isShowing()) {                    dialog.dismiss();                }                onResume();                break;            default:                break;        }    }    /**     * 隐藏pop并显示调节透明度     */    private void PopIsShowing() {        if (pop.isShowing()) {            pop.dismiss();            backGround(1f);        }    }    /**     * 设置透明度     */    private void backGround(float v2) {        WindowManager.LayoutParams lp = getWindow().getAttributes();        lp.alpha = v2;        getWindow().setAttributes(lp);    }    /**     * 初始化 dialog     */    private void initDialog() {        View popView = null;        if (popView == null) {            popView = LayoutInflater.from(this).inflate(R.layout.view_widget_pop, null);            btn_cancel = (Button) popView.findViewById(R.id.btn_cancel);            btn_reset = (Button) popView.findViewById(R.id.btn_reset);            btn_cancel.setOnClickListener(this);            btn_reset.setOnClickListener(this);            dialog = new Dialog(this, R.style.AlertDialogStyle);            dialog.setCancelable(false);            dialog.setContentView(popView);        }        if (!dialog.isShowing()) {            dialog.show();        }    }    /**     * 初始化 底部弹框     */    private void initPop() {        if (pop == null) {            View popView = LayoutInflater.from(getApplicationContext()).inflate(R.layout.fragment_bottom_menu, null);            pop = new PopupWindow(popView, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT, true);            save_picture = (TextView) popView.findViewById(R.id.save_picture);            reset_qrCode = (TextView) popView.findViewById(R.id.reset_qrCode);            cancel_tv = (TextView) popView.findViewById(R.id.cancel_tv);            save_picture.setOnClickListener(this);            reset_qrCode.setOnClickListener(this);            cancel_tv.setOnClickListener(this);        }        pop.setAnimationStyle(R.style.AnimBottom);        pop.setFocusable(true);        pop.setOutsideTouchable(true);        //设置SelectPicPopupWindow弹出窗体动画效果        pop.setAnimationStyle(R.style.AnimBottom);        //实例化一个ColorDrawable颜色为半透明        ColorDrawable dw = new ColorDrawable(0x00000000);        dw.setAlpha(100);        pop.setBackgroundDrawable(dw);        pop.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);        backGround(0.7f);        pop.setOnDismissListener(new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {                backGround(1f);            }        });    }    /**     * url读写流     */    private void QRDownload(final File mPicDir) {        new Thread(new Runnable() {            @Override            public void run() {                try {                    URL url = new URL(QRURL);                    //打开连接                    URLConnection conn = url.openConnection();                    //打开输入流                    InputStream is = conn.getInputStream();                    //不存在创建                    if (!mPicDir.exists()) {                        mPicDir.mkdir();                    }                    //下载后的文件名                    String fileName = mPicDir + ".png";                    File file1 = new File(fileName);                    if (file1.exists()) {                        file1.delete();                    }                    //创建字节流                    byte[] bs = new byte[1024];                    int len;                    OutputStream os = new FileOutputStream(fileName);                    //写数据                    while ((len = is.read(bs)) != -1) {                        os.write(bs, 0, len);                    }                    //完成后关闭流                    os.close();                    is.close();                    //step:2.保存下载路径，显示到图库中！                    SaveFile(file1);                } catch (Exception e) {                    e.printStackTrace();                }            }        }).start();    }    /**     * 保存到图库     */    private void SaveFile(File file) {        OutputStream out = null;        try {            ContentValues values = new ContentValues();            ContentResolver resolver = getContentResolver();            values.put(MediaStore.Images.ImageColumns.DATA, file.getAbsolutePath());            values.put(MediaStore.Images.ImageColumns.DISPLAY_NAME, file.getName());            values.put(MediaStore.Images.ImageColumns.MIME_TYPE, "image/jpg");            //将图片的拍摄时间设置为当前的时间            values.put(MediaStore.Images.ImageColumns.DATE_TAKEN, System.currentTimeMillis() + "");            Uri uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);            if (uri != null) {                out = resolver.openOutputStream(uri);                Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        if (pop.isShowing()) {                            pop.dismiss();                        }                        Toast.makeText(getApplicationContext(), "保存成功", Toast.LENGTH_SHORT).show();                    }                });            } else {                Toast.makeText(getApplicationContext(), "保存失败", Toast.LENGTH_SHORT).show();            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (out != null) {                try {                    out.flush();                    out.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}